// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matrixSqrt
NumericMatrix matrixSqrt(NumericMatrix orig);
RcppExport SEXP _MatrixTests_matrixSqrt(SEXP origSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type orig(origSEXP);
    rcpp_result_gen = Rcpp::wrap(matrixSqrt(orig));
    return rcpp_result_gen;
END_RCPP
}
// vectorSum
double vectorSum(NumericVector x);
RcppExport SEXP _MatrixTests_vectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(vectorSum(x));
    return rcpp_result_gen;
END_RCPP
}
// parallelMatrixSqrt
NumericMatrix parallelMatrixSqrt(NumericMatrix orig);
RcppExport SEXP _MatrixTests_parallelMatrixSqrt(SEXP origSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type orig(origSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelMatrixSqrt(orig));
    return rcpp_result_gen;
END_RCPP
}
// parallelVectorSum
double parallelVectorSum(NumericVector x);
RcppExport SEXP _MatrixTests_parallelVectorSum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelVectorSum(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MatrixTests_matrixSqrt", (DL_FUNC) &_MatrixTests_matrixSqrt, 1},
    {"_MatrixTests_vectorSum", (DL_FUNC) &_MatrixTests_vectorSum, 1},
    {"_MatrixTests_parallelMatrixSqrt", (DL_FUNC) &_MatrixTests_parallelMatrixSqrt, 1},
    {"_MatrixTests_parallelVectorSum", (DL_FUNC) &_MatrixTests_parallelVectorSum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MatrixTests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
